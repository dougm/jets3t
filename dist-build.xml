<?xml version="1.0"?>
<!-- ====================================================================== 
     JetS3t    
     Toolkit and application suite for Amazon's S3 online storage service.
                   
     James Murty                                                                
     ====================================================================== -->
<project name="JetS3t" default="help">
    <description>
    		JetS3t : Toolkit and application suite for Amazon's S3 online storage service
    </description>
	
	<property file="build.properties"/>
	
	<target name="help">
		<echo>
Welcome to the JetS3t ANT build script.
			
The build.xml script will allow you to rebuild the JetS3t suite from the
source code included with the distribution. It should make it easier to 
make your own additions to the library, to build your own versions of 
applications or applets, and to make JetS3t work the way you want.
			
The first thing you may want to do is recompile JetS3t using the latest 
version of Java. To do this, modify the debug and build.target 
properties in the build.properties file and run the "rebuild-all" target.
			
			
ANT TARGET DESCRIPTIONS
			
rebuild-all : Rebuild the JetS3t Jar files for the library and all applications.
compile     : Compiles the JetS3t source code, but does not produce Jar files.
              This target is useful as a quick test to make sure any code 
              changes you make will compile correctly.
clean       : Removes all the temporary compile/build artifacts
			  
help        : Displays this help message

rebuild-service     : Rebuild only the Jar library/toolkit files
rebuild-cockpit     : Rebuild only the Cockpit application
rebuild-synchronize : Rebuild only the Synchronize application
rebuild-gatekeeper  : Rebuild only the Gatekeeper servlet Web Archive (WAR)
rebuild-uploader    : Rebuild only the Uploader application
rebuild-cockpitlite : Rebuild only the CockpitLite application
			
repackage-applets            : Repackages all the applet applications. This
                               replaces the contents of the applets directory
                               with applets built from the latest code, and 
                               signed with the keystore configured in the
                               build.properties file.
repackage-applet-cockpit     : Repackage only the Cockpit applet
repackage-applet-cockpitlite : Repackage only the CockpitLite applet
repackage-applet-uploader    : Repackage only the Uploader applet
			
init              : Sets dynamic properties required by the build script.
unzip-source-code : Unzips the JetS3t source code from src.zip. This target will
                    be called automatically if necessary.
		</echo>
	</target>

	<!-- ================================= 
         Define the script-wide classpath.
         ================================= -->
	<path id="classpath">
		<fileset dir="${dir.libs}" includes="**/*.jar"/>
	</path>
	
	
    <target name="rebuild-all" 
    	depends="rebuild-service,rebuild-cockpit,rebuild-cockpitlite,rebuild-synchronize,rebuild-uploader,rebuild-gatekeeper"/>
	
	<target name="unzip-source-code" unless="src-unzipped">
		<unzip dest="." src="src.zip" overwrite="false"/>
	</target>
	
	<target name="init">
		<available property="src-unzipped" file="${dir.src}"/>
		<available property="keystore-exists" file="${keystore.file}"/>
	</target>
	
	<target name="compile" depends="init,unzip-source-code">		
		<mkdir dir="${dir.build}"/>
		<javac 
			srcdir="${dir.src}"
			destdir="${dir.build}"
			debug="${debug}"
			source="1.4"
			target="${build.target}">
			<classpath refid="classpath"/>
		</javac>
	</target>
		
	<target name="rebuild-service" depends="compile">
		<jar
			basedir="${dir.build}"			
			file="jars/${dist.file.service}"
            index="true"
			>
			<include name="org/jets3t/service/**"/>
			<include name="org/apache/commons/httpclient/contrib/**"/>
		</jar>
        <jar
            basedir="${dir.build}"
            file="jars/${dist.file.guisupport}"
            index="true"
            >
            <include name="org/jets3t/gui/**"/>
            <include name="org/jets3t/gui/skins/**"/>
        </jar>
	</target>

    <target name="rebuild-cockpit" depends="rebuild-service">
		<jar
			basedir="${dir.build}"			
			file="jars/${dist.file.cockpit}"
            index="true"
			>
			<include name="org/jets3t/apps/cockpit/**"/>
            <manifest>
                <attribute name="Main-Class" value="org.jets3t.apps.cockpit.Cockpit"/>
            </manifest>
		</jar>
	</target>
	
    <target name="rebuild-cockpitlite" depends="rebuild-service">
        <jar
            basedir="${dir.build}"
            file="jars/${dist.file.cockpitlite}"
            index="true"
            >
            <include name="org/jets3t/apps/cockpitlite/**"/>
            <manifest>
                <attribute name="Main-Class" value="org.jets3t.apps.cockpitlite.CockpitLite"/>
            </manifest>
        </jar>
    </target>

    <target name="rebuild-synchronize" depends="rebuild-service">
		<jar
			basedir="${dir.build}"			
			file="jars/${dist.file.synchronize}"
            index="true"
			>
			<include name="org/jets3t/apps/synchronize/**"/>
            <manifest>
                <attribute name="Main-Class" value="org.jets3t.apps.synchronize.Synchronize"/>
            </manifest>
		</jar>
	</target>
	
    <target name="rebuild-uploader" depends="rebuild-service">
		<jar
			basedir="${dir.build}"			
			file="jars/${dist.file.uploader}"
            index="true"
			>
			<include name="org/jets3t/apps/uploader/**"/>
            <manifest>
                <attribute name="Main-Class" value="org.jets3t.apps.uploader.Uploader"/>
            </manifest>
		</jar>
	</target>
	
	<target name="rebuild-gatekeeper" depends="rebuild-service">
		<war 
			destfile="servlets/gatekeeper/${dist.file.gatekeeper}"
			webxml="${dir.servlets}/gatekeeper-web.xml"
			>
			
			<lib dir="jars" includes="${dist.file.service}"/>
			<lib dir="${dir.libs}/commons-httpclient" includes="*.jar"/>
			<lib dir="${dir.libs}/commons-logging" includes="*.jar"/>
			<lib dir="${dir.libs}/commons-codec" includes="*.jar"/>
			<lib dir="${dir.libs}/logging-log4j" includes="*.jar"/>
			<lib dir="${dir.libs}/safehaus_jug" includes="*.jar"/>
			
			<classes dir="${dir.configs}">
                <include name="commons-logging.properties"/>
                <include name="log4j.properties"/>
                <include name="simplelog.properties"/>
			</classes>			
			<classes dir="${dir.build}">
				<include name="org/jets3t/servlets/gatekeeper/**"/>
			</classes>
		</war>
	</target>
	
	<target name="create-keystore" unless="keystore-exists">
		<echo>
Keystore file ${keystore.file} does not exist. The build script will now create
a generic keystore on your behalf for development and testing purposes. If you
intend to make the applets publicly available, please create a keystore with
proper information and modify the keystore settings in build.properties
to refer to this official keystore.
		</echo>
		<genkey
			alias="${keystore.alias}"
			storepass="${keystore.storepass}"
			keystore="${keystore.file}"
			keypass="${keystore.keypass}"
			dname="CN=Unknown Developer, OU=, O=, C="
			validity="30"
			verbose="true">			
		</genkey>
	</target>

    <target name="repackage-applets" depends="repackage-applet-cockpit,repackage-applet-cockpitlite,repackage-applet-uploader">
	</target>
		
    <target name="sign-jars" depends="init,rebuild-all,create-keystore">
		<mkdir dir="${dir.applets}"/>
		
        <!-- Copy jars required by all applets -->
		<copy 			
			todir="${dir.applets}"
			flatten="true"
			>
			<fileset dir="jars">
				<include name="**/${dist.file.service}"/>
				<include name="**/${dist.file.guisupport}"/>
			</fileset>
		</copy>
		<copy 			
			todir="${dir.applets}"
			flatten="true"
			>
			<fileset dir="${dir.libs}">
				<include name="**/commons-logging/*.jar"/>
				<include name="**/commons-codec/*.jar"/>
				<include name="**/commons-httpclient/*.jar"/>
                <include name="**/logging-log4j/*.jar"/>
			</fileset>
		</copy>

		<!-- Sign jars -->		
		<signjar 
			alias="${keystore.alias}"
			keystore="${keystore.file}"
			storepass="${keystore.storepass}"
            keypass="${keystore.keypass}"
            lazy="true"
            >
            <fileset dir="${dir.applets}">
                <include name="${dist.file.service}"/>
                <include name="commons-codec-1.3.jar"/>
                <include name="commons-httpclient-3.1.jar"/>
                <include name="commons-logging-1.1.jar"/>
                <include name="log4j-1.2.14.jar"/>
            </fileset>
		</signjar>
    </target>
		
    <target name="repackage-applet-cockpit" depends="sign-jars">

        <!-- Copy jars required by Cockpit applet -->
        <copy
            todir="${dir.applets}"
            flatten="true"
            >
            <fileset dir="jars">
                <include name="**/${dist.file.cockpit}"/>
            </fileset>
        </copy>

		<!-- Copy relevant configuration files -->
		<copy todir="${dir.applets}">
			<fileset dir="${dir.configs}">
				<include name="jets3t.properties"/>
				<include name="mime.types"/>
			</fileset>
		</copy>
		<copy todir="${dir.applets}">
			<fileset dir="${dir.applets}">
				<include name="commons-logging.properties"/>
				<include name="simplelog.properties"/>
			</fileset>
		</copy>

		<!-- Copy applet running HTML files -->
		<copy todir="${dir.applets}">
            <fileset dir="${dir.applets}">
                <exclude name="*cockpit*lite*"/>
                <include name="*cockpit*"/>
            </fileset>
		</copy>
    	
		<!-- Copy resources -->
		<copy todir="${dir.applets}">
			<fileset dir="${dir.resources}" includes="**"/>
		</copy>
		
        <!-- Sign jars -->
        <signjar
            alias="${keystore.alias}"
            keystore="${keystore.file}"
            storepass="${keystore.storepass}"
            keypass="${keystore.keypass}"
            lazy="true"
            >
            <fileset dir="${dir.applets}">
                <include name="${dist.file.cockpit}"/>
            </fileset>
        </signjar>
	</target>
		
    <target name="repackage-applet-cockpitlite" depends="sign-jars">
		
        <!-- Copy jars required by CockpitLite applet -->
		<copy 			
			todir="${dir.applets}"
			flatten="true"
			>
			<fileset dir="jars">
                <include name="**/${dist.file.cockpitlite}"/>
                <include name="**/${dist.file.guisupport}"/>
			</fileset>
		</copy>

        <!-- Copy relevant configuration files -->
        <copy todir="${dir.applets}">
            <fileset dir="${dir.configs}">
                <include name="jets3t.properties"/>
                <include name="mime.types"/>
                <include name="cockpit-lite.properties"/>
			</fileset>
		</copy>
        <copy todir="${dir.applets}">
            <fileset dir="${dir.applets}">
                <include name="commons-logging.properties"/>
                <include name="simplelog.properties"/>
            </fileset>
        </copy>

        <!-- Copy applet running HTML files -->
        <copy todir="${dir.applets}">
            <fileset dir="${dir.applets}">
                <include name="*cockpit*lite*"/>
            </fileset>
        </copy>
    	
		<!-- Copy resources -->
		<copy todir="${dir.applets}">
			<fileset dir="${dir.resources}" includes="**"/>
		</copy>

		<!-- Sign jars -->		
		<signjar 
			alias="${keystore.alias}"
			keystore="${keystore.file}"
			storepass="${keystore.storepass}"
            keypass="${keystore.keypass}"
            lazy="true"
            >
            <fileset dir="${dir.applets}">
                <include name="${dist.file.cockpitlite}"/>
            </fileset>
		</signjar>
    </target>
		
    <target name="repackage-applet-uploader" depends="sign-jars">

        <!-- Copy jars required by Uploader applet -->
        <copy
            todir="${dir.applets}"
            flatten="true"
            >
            <fileset dir="jars">
                <include name="**/${dist.file.uploader}"/>
            </fileset>
        </copy>

		<!-- Copy relevant configuration files -->
		<copy todir="${dir.applets}">
			<fileset dir="${dir.configs}">
				<include name="jets3t.properties"/>
				<include name="mime.types"/>
                <include name="uploader.properties"/>
                <include name="cockpitlite.properties"/>
			</fileset>
		</copy>
		<copy todir="${dir.applets}">
			<fileset dir="${dir.applets}">
				<include name="commons-logging.properties"/>
				<include name="simplelog.properties"/>
			</fileset>
		</copy>

		<!-- Copy applet running HTML files -->
		<copy todir="${dir.applets}">
            <fileset dir="${dir.applets}">
                <include name="*uploader*"/>
            </fileset>
		</copy>
    	
		<!-- Copy resources -->
		<copy todir="${dir.applets}">
			<fileset dir="${dir.resources}" includes="**"/>
		</copy>
		
        <!-- Sign jars -->
        <signjar
            alias="${keystore.alias}"
            keystore="${keystore.file}"
            storepass="${keystore.storepass}"
            keypass="${keystore.keypass}"
            lazy="true"
            >
            <fileset dir="${dir.applets}">
                <include name="${dist.file.uploader}"/>
            </fileset>
        </signjar>
	</target>


	<target name="clean">
		<delete dir="${dir.build}"/>
	</target>
	
</project>

